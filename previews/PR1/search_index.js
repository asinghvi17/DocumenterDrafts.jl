var documenterSearchIndex = {"docs":
[{"location":"guide/#User-Guide","page":"User Guide","title":"User Guide","text":"","category":"section"},{"location":"guide/#Configuration","page":"User Guide","title":"Configuration","text":"","category":"section"},{"location":"guide/#DraftConfig-Parameters","page":"User Guide","title":"DraftConfig Parameters","text":"","category":"section"},{"location":"guide/#always_include::Vector{String}-(default:-[])","page":"User Guide","title":"always_include::Vector{String} (default: [])","text":"","category":"section"},{"location":"guide/","page":"User Guide","title":"User Guide","text":"Pages that should ALWAYS be fully built, regardless of modification status.","category":"page"},{"location":"guide/","page":"User Guide","title":"User Guide","text":"DraftConfig(always_include = [\"index.md\", \"getting-started.md\", \"api/core.md\"])","category":"page"},{"location":"guide/","page":"User Guide","title":"User Guide","text":"Use this for:","category":"page"},{"location":"guide/","page":"User Guide","title":"User Guide","text":"Critical pages (homepage, getting started)\nPages that must always be complete\nNavigation-critical documentation","category":"page"},{"location":"guide/#devbranch::String-(default:-\"master\")","page":"User Guide","title":"devbranch::String (default: \"master\")","text":"","category":"section"},{"location":"guide/","page":"User Guide","title":"User Guide","text":"The main development branch that PRs are made against.","category":"page"},{"location":"guide/","page":"User Guide","title":"User Guide","text":"DraftConfig(devbranch = \"main\")","category":"page"},{"location":"guide/#deploy_config::Union{NamedTuple,-Nothing}-(default:-nothing)","page":"User Guide","title":"deploy_config::Union{NamedTuple, Nothing} (default: nothing)","text":"","category":"section"},{"location":"guide/","page":"User Guide","title":"User Guide","text":"Recommended approach: Share configuration with deploydocs.","category":"page"},{"location":"guide/","page":"User Guide","title":"User Guide","text":"deploy_config = (\n    repo = \"github.com/MyOrg/MyPackage.jl\",\n    devbranch = \"main\",\n    push_preview = true,\n)\n\nDraftConfig(deploy_config = deploy_config)\ndeploydocs(;deploy_config...)","category":"page"},{"location":"guide/","page":"User Guide","title":"User Guide","text":"When provided, devbranch and repo are extracted from this config, overriding individual parameters.","category":"page"},{"location":"guide/#repo::Union{String,-Nothing}-(default:-nothing)","page":"User Guide","title":"repo::Union{String, Nothing} (default: nothing)","text":"","category":"section"},{"location":"guide/","page":"User Guide","title":"User Guide","text":"Repository slug for validation (optional). Format: \"owner/repo\".","category":"page"},{"location":"guide/","page":"User Guide","title":"User Guide","text":"Auto-detection priority:","category":"page"},{"location":"guide/","page":"User Guide","title":"User Guide","text":"deploy_config.repo (if present)\nExplicit config.repo (if set)\nmakedocs(repo = \"...\") (auto-detected from Document)","category":"page"},{"location":"guide/","page":"User Guide","title":"User Guide","text":"The plugin automatically handles various repo URL formats:","category":"page"},{"location":"guide/","page":"User Guide","title":"User Guide","text":"\"github.com/owner/repo\" → \"owner/repo\"\n\"https://github.com/owner/repo\" → \"owner/repo\"\n\"owner/repo.git\" → \"owner/repo\"","category":"page"},{"location":"guide/#use_ci_env::Bool-(default:-true)","page":"User Guide","title":"use_ci_env::Bool (default: true)","text":"","category":"section"},{"location":"guide/","page":"User Guide","title":"User Guide","text":"Whether to check CI environment variables for PR detection.","category":"page"},{"location":"guide/","page":"User Guide","title":"User Guide","text":"Checked variables:","category":"page"},{"location":"guide/","page":"User Guide","title":"User Guide","text":"Travis CI: TRAVIS_PULL_REQUEST\nGitHub Actions: GITHUB_EVENT_NAME\nGitLab CI: CI_MERGE_REQUEST_ID","category":"page"},{"location":"guide/","page":"User Guide","title":"User Guide","text":"Set to false to rely solely on git branch comparison.","category":"page"},{"location":"guide/#enabled::Bool-(default:-true)","page":"User Guide","title":"enabled::Bool (default: true)","text":"","category":"section"},{"location":"guide/","page":"User Guide","title":"User Guide","text":"Master enable/disable switch.","category":"page"},{"location":"guide/","page":"User Guide","title":"User Guide","text":"# Only enable in CI\nDraftConfig(enabled = get(ENV, \"CI\", \"false\") == \"true\")\n\n# Disable for local builds\nDraftConfig(enabled = !isinteractive())","category":"page"},{"location":"guide/","page":"User Guide","title":"User Guide","text":"","category":"page"},{"location":"guide/#Usage-Patterns","page":"User Guide","title":"Usage Patterns","text":"","category":"section"},{"location":"guide/#Pattern-1:-Shared-deploy_config-(Recommended)","page":"User Guide","title":"Pattern 1: Shared deploy_config (Recommended)","text":"","category":"section"},{"location":"guide/","page":"User Guide","title":"User Guide","text":"deploy_config = (\n    repo = \"github.com/MyOrg/MyPackage.jl\",\n    devbranch = \"main\",\n    push_preview = true,\n)\n\nmakedocs(\n    sitename = \"MyPackage\",\n    repo = \"https://github.com/MyOrg/MyPackage.jl\",\n    plugins = [\n        DraftConfig(\n            always_include = [\"index.md\"],\n            deploy_config = deploy_config,\n        )\n    ]\n)\n\ndeploydocs(;deploy_config...)","category":"page"},{"location":"guide/","page":"User Guide","title":"User Guide","text":"Pros:","category":"page"},{"location":"guide/","page":"User Guide","title":"User Guide","text":"✅ Single source of truth for devbranch and repo\n✅ No duplication\n✅ Easy to maintain","category":"page"},{"location":"guide/","page":"User Guide","title":"User Guide","text":"Cons:","category":"page"},{"location":"guide/","page":"User Guide","title":"User Guide","text":"None!","category":"page"},{"location":"guide/#Pattern-2:-Auto-detection-from-makedocs","page":"User Guide","title":"Pattern 2: Auto-detection from makedocs","text":"","category":"section"},{"location":"guide/","page":"User Guide","title":"User Guide","text":"makedocs(\n    sitename = \"MyPackage\",\n    repo = \"https://github.com/MyOrg/MyPackage.jl\",\n    plugins = [\n        DraftConfig(\n            always_include = [\"index.md\"],\n            devbranch = \"main\",\n        )\n    ]\n)\n\ndeploydocs(\n    repo = \"github.com/MyOrg/MyPackage.jl\",\n    devbranch = \"main\",\n)","category":"page"},{"location":"guide/","page":"User Guide","title":"User Guide","text":"Pros:","category":"page"},{"location":"guide/","page":"User Guide","title":"User Guide","text":"✅ Simple and straightforward\n✅ Repo auto-detected from makedocs","category":"page"},{"location":"guide/","page":"User Guide","title":"User Guide","text":"Cons:","category":"page"},{"location":"guide/","page":"User Guide","title":"User Guide","text":"⚠️ Must specify devbranch in both places","category":"page"},{"location":"guide/#Pattern-3:-Explicit-Configuration","page":"User Guide","title":"Pattern 3: Explicit Configuration","text":"","category":"section"},{"location":"guide/","page":"User Guide","title":"User Guide","text":"makedocs(\n    sitename = \"MyPackage\",\n    plugins = [\n        DraftConfig(\n            always_include = [\"index.md\"],\n            devbranch = \"main\",\n            repo = \"MyOrg/MyPackage.jl\",\n        )\n    ]\n)","category":"page"},{"location":"guide/","page":"User Guide","title":"User Guide","text":"Pros:","category":"page"},{"location":"guide/","page":"User Guide","title":"User Guide","text":"✅ Explicit and clear","category":"page"},{"location":"guide/","page":"User Guide","title":"User Guide","text":"Cons:","category":"page"},{"location":"guide/","page":"User Guide","title":"User Guide","text":"⚠️ More verbose\n⚠️ Manual repo specification","category":"page"},{"location":"guide/","page":"User Guide","title":"User Guide","text":"","category":"page"},{"location":"guide/#CI/CD-Integration","page":"User Guide","title":"CI/CD Integration","text":"","category":"section"},{"location":"guide/#GitHub-Actions","page":"User Guide","title":"GitHub Actions","text":"","category":"section"},{"location":"guide/","page":"User Guide","title":"User Guide","text":"name: Documentation\n\non:\n  pull_request:\n  push:\n    branches:\n      - main\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v4\n      - uses: julia-actions/setup-julia@v2\n      - name: Build documentation\n        run: julia --project=docs/ docs/make.jl\n        env:\n          GITHUB_TOKEN: \\${{ secrets.GITHUB_TOKEN }}\n          DOCUMENTER_KEY: \\${{ secrets.DOCUMENTER_KEY }}","category":"page"},{"location":"guide/","page":"User Guide","title":"User Guide","text":"The plugin automatically detects GITHUB_EVENT_NAME=pull_request.","category":"page"},{"location":"guide/#Travis-CI","page":"User Guide","title":"Travis CI","text":"","category":"section"},{"location":"guide/","page":"User Guide","title":"User Guide","text":"language: julia\njulia:\n  - 1.6\njobs:\n  include:\n    - stage: \"Documentation\"\n      julia: 1.6\n      script:\n        - julia --project=docs/ docs/make.jl","category":"page"},{"location":"guide/","page":"User Guide","title":"User Guide","text":"The plugin automatically detects TRAVIS_PULL_REQUEST != \"false\".","category":"page"},{"location":"guide/#GitLab-CI","page":"User Guide","title":"GitLab CI","text":"","category":"section"},{"location":"guide/","page":"User Guide","title":"User Guide","text":"docs:\n  script:\n    - julia --project=docs/ docs/make.jl\n  only:\n    - merge_requests\n    - main","category":"page"},{"location":"guide/","page":"User Guide","title":"User Guide","text":"The plugin automatically detects CI_MERGE_REQUEST_ID.","category":"page"},{"location":"guide/","page":"User Guide","title":"User Guide","text":"","category":"page"},{"location":"guide/#How-Draft-Status-Works","page":"User Guide","title":"How Draft Status Works","text":"","category":"section"},{"location":"guide/#Setting-Draft-Status","page":"User Guide","title":"Setting Draft Status","text":"","category":"section"},{"location":"guide/","page":"User Guide","title":"User Guide","text":"The plugin sets page.globals.meta[:Draft] = true for pages that should be drafted.","category":"page"},{"location":"guide/#Checking-Draft-Status-in-Writers","page":"User Guide","title":"Checking Draft Status in Writers","text":"","category":"section"},{"location":"guide/","page":"User Guide","title":"User Guide","text":"Writers and custom post-processors can check if a page is marked as a draft:","category":"page"},{"location":"guide/","page":"User Guide","title":"User Guide","text":"function process_page(page::Documenter.Documents.Page)\n    is_draft = get(page.globals.meta, :Draft, false)\n\n    if is_draft\n        # Add \"DRAFT\" watermark\n        # Skip expensive rendering (plots, diagrams)\n        # Add <meta name=\"robots\" content=\"noindex\">\n        # Use simplified rendering\n    else\n        # Full rendering with all features\n    end\nend","category":"page"},{"location":"guide/#Example:-Custom-HTML-Writer","page":"User Guide","title":"Example: Custom HTML Writer","text":"","category":"section"},{"location":"guide/","page":"User Guide","title":"User Guide","text":"function add_draft_banner(html_content::String, page::Documenter.Documents.Page)\n    is_draft = get(page.globals.meta, :Draft, false)\n\n    if is_draft\n        banner = \"\"\"\n        <div class=\"draft-banner\">\n            ⚠️ DRAFT: This page may not be complete.\n        </div>\n        \"\"\"\n        return banner * html_content\n    end\n\n    return html_content\nend","category":"page"},{"location":"guide/","page":"User Guide","title":"User Guide","text":"","category":"page"},{"location":"guide/#Troubleshooting","page":"User Guide","title":"Troubleshooting","text":"","category":"section"},{"location":"guide/#Plugin-Not-Activating","page":"User Guide","title":"Plugin Not Activating","text":"","category":"section"},{"location":"guide/","page":"User Guide","title":"User Guide","text":"Check debug logs:","category":"page"},{"location":"guide/","page":"User Guide","title":"User Guide","text":"ENV[\"JULIA_DEBUG\"] = \"DocumenterDrafts\"","category":"page"},{"location":"guide/","page":"User Guide","title":"User Guide","text":"Common causes:","category":"page"},{"location":"guide/","page":"User Guide","title":"User Guide","text":"Not on a PR branch (check git branch vs devbranch)\nCI environment variables not set\nenabled = false\nRepo validation mismatch","category":"page"},{"location":"guide/#All-Pages-Marked-as-Drafts","page":"User Guide","title":"All Pages Marked as Drafts","text":"","category":"section"},{"location":"guide/","page":"User Guide","title":"User Guide","text":"Verify always_include:","category":"page"},{"location":"guide/","page":"User Guide","title":"User Guide","text":"DraftConfig(always_include = [\"index.md\", \"critical-page.md\"])","category":"page"},{"location":"guide/","page":"User Guide","title":"User Guide","text":"Check file paths: Ensure paths are relative to docs/src/:","category":"page"},{"location":"guide/","page":"User Guide","title":"User Guide","text":"✅ \"index.md\"\n✅ \"guide/quickstart.md\"\n❌ \"docs/src/index.md\" (too long)\n❌ \"/index.md\" (absolute path)","category":"page"},{"location":"guide/#No-Pages-Marked-as-Drafts","page":"User Guide","title":"No Pages Marked as Drafts","text":"","category":"section"},{"location":"guide/","page":"User Guide","title":"User Guide","text":"Possible causes:","category":"page"},{"location":"guide/","page":"User Guide","title":"User Guide","text":"On devbranch (not a PR)\nPlugin disabled (enabled = false)\nRepo validation failed\nGit diff failed","category":"page"},{"location":"guide/","page":"User Guide","title":"User Guide","text":"Check CI detection:","category":"page"},{"location":"guide/","page":"User Guide","title":"User Guide","text":"# Force CI detection off to test git branch detection\nDraftConfig(use_ci_env = false)","category":"page"},{"location":"guide/#Git-Diff-Not-Detecting-Changes","page":"User Guide","title":"Git Diff Not Detecting Changes","text":"","category":"section"},{"location":"guide/","page":"User Guide","title":"User Guide","text":"Verify git setup:","category":"page"},{"location":"guide/","page":"User Guide","title":"User Guide","text":"git status\ngit log --oneline\ngit diff main...HEAD -- docs/","category":"page"},{"location":"guide/","page":"User Guide","title":"User Guide","text":"Common issues:","category":"page"},{"location":"guide/","page":"User Guide","title":"User Guide","text":"Not in a git repository\nBranch not diverged from devbranch\nModified files not in docs/ directory\nFiles not committed","category":"page"},{"location":"guide/","page":"User Guide","title":"User Guide","text":"","category":"page"},{"location":"guide/#Best-Practices","page":"User Guide","title":"Best Practices","text":"","category":"section"},{"location":"guide/#1.-Always-Include-Critical-Pages","page":"User Guide","title":"1. Always Include Critical Pages","text":"","category":"section"},{"location":"guide/","page":"User Guide","title":"User Guide","text":"always_include = [\n    \"index.md\",           # Homepage\n    \"getting-started.md\", # Onboarding\n    \"api/core.md\",       # Core API reference\n]","category":"page"},{"location":"guide/#2.-Use-deploy_config-for-DRY","page":"User Guide","title":"2. Use deploy_config for DRY","text":"","category":"section"},{"location":"guide/","page":"User Guide","title":"User Guide","text":"deploy_config = (repo = \"...\", devbranch = \"...\")\n# Use in both DraftConfig and deploydocs","category":"page"},{"location":"guide/#3.-Enable-Only-in-CI","page":"User Guide","title":"3. Enable Only in CI","text":"","category":"section"},{"location":"guide/","page":"User Guide","title":"User Guide","text":"DraftConfig(enabled = get(ENV, \"CI\", \"false\") == \"true\")","category":"page"},{"location":"guide/#4.-Test-Locally","page":"User Guide","title":"4. Test Locally","text":"","category":"section"},{"location":"guide/","page":"User Guide","title":"User Guide","text":"# On a feature branch, run:\njulia --project=docs/ docs/make.jl\n\n# Check docs/build/ for drafted pages","category":"page"},{"location":"guide/#5.-Monitor-Logs","page":"User Guide","title":"5. Monitor Logs","text":"","category":"section"},{"location":"guide/","page":"User Guide","title":"User Guide","text":"Look for:","category":"page"},{"location":"guide/","page":"User Guide","title":"User Guide","text":"DocumenterDrafts: Found 2 modified docs\nDocumenterDrafts: Marked 3/10 pages as drafts","category":"page"},{"location":"guide/","page":"User Guide","title":"User Guide","text":"","category":"page"},{"location":"guide/#Advanced-Usage","page":"User Guide","title":"Advanced Usage","text":"","category":"section"},{"location":"guide/#Custom-Pipeline-Integration","page":"User Guide","title":"Custom Pipeline Integration","text":"","category":"section"},{"location":"guide/","page":"User Guide","title":"User Guide","text":"You can check draft status in custom pipeline steps:","category":"page"},{"location":"guide/","page":"User Guide","title":"User Guide","text":"abstract type MyCustomStep <: Documenter.Builder.DocumentPipeline end\n\nfunction Documenter.Selectors.runner(::Type{MyCustomStep}, doc::Documenter.Document)\n    for (filename, page) in doc.blueprint.pages\n        if get(page.globals.meta, :Draft, false)\n            # Skip expensive processing for drafts\n            continue\n        end\n        # Full processing for non-drafts\n    end\nend","category":"page"},{"location":"guide/#Conditional-Rendering","page":"User Guide","title":"Conditional Rendering","text":"","category":"section"},{"location":"guide/","page":"User Guide","title":"User Guide","text":"function should_render_expensive_content(page)\n    return !get(page.globals.meta, :Draft, false)\nend","category":"page"},{"location":"api/#API-Reference","page":"API Reference","title":"API Reference","text":"","category":"section"},{"location":"api/#Configuration","page":"API Reference","title":"Configuration","text":"","category":"section"},{"location":"api/#DocumenterDrafts.DraftConfig","page":"API Reference","title":"DocumenterDrafts.DraftConfig","text":"DraftConfig <: Documenter.Plugin\n\nConfiguration for the DocumenterDrafts plugin that marks pages as drafts based on PR status and git changes.\n\nFields\n\nalways_include::Vector{String}: List of page paths (relative to docs/) that should ALWAYS be fully built, regardless of whether they were modified. Example: [\"index.md\", \"guides/quickstart.md\"]\nenabled::Bool: Whether to enable the draft plugin. Can be used to disable in production builds. Automatically disables when not on a PR (checked via CI environment variables). Default: true\ndevbranch::String: The development branch to compare against (similar to deploydocs' devbranch). This is the main branch that PRs are typically made against. Default: \"master\" (to match Documenter's default)\ndeploy_config::Union{NamedTuple, Nothing}: Deploy configuration that matches deploydocs parameters. If provided, devbranch and other parameters will be extracted from this. Expected fields: (devbranch = \"...\", repo = \"...\", ...) Default: nothing\nrepo::Union{String, Nothing}: Repository slug for validation (optional). Format: \"owner/repo\" (e.g., \"JuliaDocs/Documenter.jl\"). If nothing, will be extracted from doc.user.repo during pipeline execution. If provided explicitly, overrides the document's repo. Default: nothing (auto-detect from Document)\nuse_ci_env::Bool: Whether to use CI environment variables to detect PR status. When true, checks TRAVISPULLREQUEST, GITHUBEVENTNAME, etc. When false, relies solely on git branch comparison. Default: true (recommended for CI/CD environments)\n\nExamples\n\nUsing deploy_config (recommended)\n\nusing Documenter\nusing DocumenterDrafts\n\ndeploy_conf = (\n    repo = \"github.com/MyOrg/MyPackage.jl\",\n    devbranch = \"main\",\n)\n\nmakedocs(\n    sitename = \"MyPackage.jl\",\n    repo = \"https://github.com/MyOrg/MyPackage.jl\",  # Sets doc.user.repo\n    plugins = [\n        DraftConfig(\n            always_include = [\"index.md\", \"api/core.md\"],\n            deploy_config = deploy_conf\n        )\n    ]\n)\n\ndeploydocs(;deploy_conf...)\n\nUsing individual parameters\n\nmakedocs(\n    sitename = \"MyPackage.jl\",\n    repo = \"https://github.com/MyOrg/MyPackage.jl\",\n    plugins = [\n        DraftConfig(\n            always_include = [\"index.md\", \"api/core.md\"],\n            devbranch = \"main\"\n            # repo will be auto-detected from makedocs' repo parameter\n        )\n    ]\n)\n\nExplicit repo override\n\nmakedocs(\n    plugins = [\n        DraftConfig(\n            devbranch = \"main\",\n            repo = \"MyOrg/MyPackage.jl\"  # Explicit repo slug\n        )\n    ]\n)\n\n\n\n\n\n","category":"type"},{"location":"api/#Pipeline","page":"API Reference","title":"Pipeline","text":"","category":"section"},{"location":"api/#DocumenterDrafts.DraftMarking","page":"API Reference","title":"DocumenterDrafts.DraftMarking","text":"DraftMarking <: Documenter.Builder.DocumentPipeline\n\nPipeline step that marks documentation pages as drafts based on PR status and git changes.\n\nThis step:\n\nChecks if the plugin is enabled\nValidates the repository (if configured)\nDetects if building for a PR (via CI env vars or git)\nGets list of modified .md files via git diff\nMarks unmodified pages as drafts (except those in always_include)\n\nThe draft status is set via page.globals.meta[:Draft] = true, which can be checked by writers (HTML, LaTeX) to adjust rendering.\n\nRuns at priority 0.9, before SetupBuildDirectory (1.0), to ensure pages are marked before any rendering occurs.\n\n\n\n\n\n","category":"type"},{"location":"api/#Functions","page":"API Reference","title":"Functions","text":"","category":"section"},{"location":"api/#Configuration-Helpers","page":"API Reference","title":"Configuration Helpers","text":"","category":"section"},{"location":"api/#DocumenterDrafts.get_effective_devbranch","page":"API Reference","title":"DocumenterDrafts.get_effective_devbranch","text":"get_effective_devbranch(config::DraftConfig) -> String\n\nReturns the effective devbranch, preferring deploy_config if available.\n\n\n\n\n\n","category":"function"},{"location":"api/#DocumenterDrafts.get_effective_repo","page":"API Reference","title":"DocumenterDrafts.get_effective_repo","text":"get_effective_repo(config::DraftConfig, doc) -> Union{String, Nothing}\n\nReturns the effective repository slug, with priority:\n\ndeploy_config.repo (if present)\nconfig.repo (if explicitly set)\ndoc.user.repo (auto-detected from makedocs)\n\nThe repo from deploydocs may include \"github.com/\" prefix which we extract.\n\nThe doc parameter should be a Documenter.Documents.Document instance.\n\n\n\n\n\n","category":"function"},{"location":"api/#DocumenterDrafts.extract_repo_slug","page":"API Reference","title":"DocumenterDrafts.extract_repo_slug","text":"extract_repo_slug(repo_url::String) -> String\n\nExtracts the owner/repo slug from various repo URL formats:\n\n\"github.com/owner/repo\" -> \"owner/repo\"\n\"https://github.com/owner/repo\" -> \"owner/repo\"\n\"owner/repo\" -> \"owner/repo\"\n\"owner/repo.git\" -> \"owner/repo\"\n\n\n\n\n\n","category":"function"},{"location":"api/#Git-Integration","page":"API Reference","title":"Git Integration","text":"","category":"section"},{"location":"api/#DocumenterDrafts.is_pull_request","page":"API Reference","title":"DocumenterDrafts.is_pull_request","text":"is_pull_request(doc, devbranch::String, use_ci_env::Bool) -> Bool\n\nChecks if currently building for a PR (inspired by deploydocs logic).\n\nFirst checks CI environment variables if enabled (most reliable in CI/CD):\n\nTravis CI: TRAVIS_PULL_REQUEST != \"false\"\nGitHub Actions: GITHUB_EVENT_NAME == \"pull_request\"\nGitLab CI: CI_MERGE_REQUEST_ID is non-empty\n\nFalls back to git branch comparison for local development. Returns false on errors (safe default: build everything fully).\n\nThe doc parameter should be a Documenter.Documents.Document instance, used to access doc.user.root for running git commands in the correct directory.\n\n\n\n\n\n","category":"function"},{"location":"api/#DocumenterDrafts.get_modified_docs","page":"API Reference","title":"DocumenterDrafts.get_modified_docs","text":"get_modified_docs(doc, devbranch::String) -> Set{String}\n\nGets list of modified .md files in docs/ directory.\n\nUses git diff --name-only devbranch...HEAD -- docs/ to get changes since the branch diverged from devbranch (three dots).\n\nReturns a Set of relative paths (with \"docs/\" prefix stripped) to match page filenames in Documenter.\n\nReturns empty set on errors (safe default: build everything fully).\n\nThe doc parameter should be a Documenter.Documents.Document instance, used to access doc.user.root for running git commands in the correct directory.\n\n\n\n\n\n","category":"function"},{"location":"api/#Decision-Logic","page":"API Reference","title":"Decision Logic","text":"","category":"section"},{"location":"api/#DocumenterDrafts.should_build_full","page":"API Reference","title":"DocumenterDrafts.should_build_full","text":"should_build_full(filename::String, modified_files::Set{String}, always_include::Vector{String}) -> Bool\n\nDetermines if a page should be built fully (not marked as draft).\n\nReturns true if:\n\nThe page is in the always_include list, OR\nThe page was modified (in modified_files)\n\nReturns false otherwise (page will be marked as draft).\n\n\n\n\n\n","category":"function"},{"location":"api/","page":"API Reference","title":"API Reference","text":"","category":"page"},{"location":"api/#Index","page":"API Reference","title":"Index","text":"","category":"section"},{"location":"api/","page":"API Reference","title":"API Reference","text":"Pages = [\"api.md\"]","category":"page"},{"location":"tryme/","page":"This should be draft","title":"This should be draft","text":"1+1","category":"page"},{"location":"#DocumenterDrafts.jl","page":"Home","title":"DocumenterDrafts.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"A Documenter.jl plugin for intelligent draft page marking in Pull Request builds.","category":"page"},{"location":"#Overview","page":"Home","title":"Overview","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"DocumenterDrafts.jl helps optimize documentation builds for Pull Requests by marking only unmodified pages as drafts. This allows you to:","category":"page"},{"location":"","page":"Home","title":"Home","text":"⚡ Speed up PR documentation builds by skipping expensive rendering for unchanged pages\n🎯 Focus review on modified documentation\n🔄 Seamlessly integrate with Documenter's deploydocs workflow\n🤖 Auto-detect PR context from CI environment variables","category":"page"},{"location":"#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"using Pkg\nPkg.add(\"DocumenterDrafts\")","category":"page"},{"location":"#Quick-Start","page":"Home","title":"Quick Start","text":"","category":"section"},{"location":"#Method-1:-Using-deploy_config-(Recommended)","page":"Home","title":"Method 1: Using deploy_config (Recommended)","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Share configuration between DraftConfig and deploydocs:","category":"page"},{"location":"","page":"Home","title":"Home","text":"using Documenter\nusing DocumenterDrafts\n\ndeploy_config = (\n    repo = \"github.com/MyOrg/MyPackage.jl\",\n    devbranch = \"main\",\n)\n\nmakedocs(\n    sitename = \"MyPackage.jl\",\n    repo = \"https://github.com/MyOrg/MyPackage.jl\",\n    pages = [\n        \"Home\" => \"index.md\",\n        \"Guide\" => \"guide.md\",\n        \"API\" => \"api.md\",\n    ],\n    plugins = [\n        DraftConfig(\n            always_include = [\"index.md\", \"api.md\"],\n            deploy_config = deploy_config,\n        )\n    ]\n)\n\ndeploydocs(;deploy_config...)","category":"page"},{"location":"#Method-2:-Auto-detection-from-makedocs","page":"Home","title":"Method 2: Auto-detection from makedocs","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Let the plugin auto-detect the repository from makedocs:","category":"page"},{"location":"","page":"Home","title":"Home","text":"makedocs(\n    sitename = \"MyPackage.jl\",\n    repo = \"https://github.com/MyOrg/MyPackage.jl\",  # Auto-detected\n    plugins = [\n        DraftConfig(\n            always_include = [\"index.md\"],\n            devbranch = \"main\",\n        )\n    ]\n)","category":"page"},{"location":"#How-It-Works","page":"Home","title":"How It Works","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"PR Detection: Checks CI environment variables (Travis, GitHub Actions, GitLab) or compares git branch to devbranch\nGit Diff: Runs git diff devbranch...HEAD -- docs/ to find modified files\nDraft Marking: Sets page.globals.meta[:Draft] = true for unmodified pages (except always_include)\nWriter Integration: Writers can check draft status to adjust rendering","category":"page"},{"location":"#Features","page":"Home","title":"Features","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"✅ CI-aware: Detects PRs via Travis, GitHub Actions, and GitLab environment variables\n✅ Git-integrated: Uses git diff to identify modified documentation files\n✅ Flexible: Supports always_include list for critical pages\n✅ deploydocs integration: Shares devbranch and repo parameters\n✅ Safe defaults: Builds everything fully when uncertain\n✅ Directory-agnostic: Runs git commands in correct directory using doc.user.root","category":"page"},{"location":"#Next-Steps","page":"Home","title":"Next Steps","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"User Guide: Detailed usage patterns, CI/CD integration, and troubleshooting\nAPI Reference: Complete API documentation for all functions and types","category":"page"},{"location":"#Related-Links","page":"Home","title":"Related Links","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"GitHub: asinghvi17/DocumenterDrafts.jl\nDocumenter.jl: JuliaDocs/Documenter.jl","category":"page"}]
}
